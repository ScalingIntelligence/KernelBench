REASONING TRACE:
Okay, let's break down the reasoning provided and extract the rule-like statements. The user wants these rules to be general enough for various CUDA kernels and objectively verifiable.

First, the reasoning mentions that Kernel 1 uses hard-coded parameters as compile-time constants. This allows the compiler to optimize divisions into faster operations and enables loop unrolling. So a rule here could be about using compile-time constants for parameters to enable optimizations.

Next, the use of #pragma unroll on loops with fixed bounds (like input channels, kernel height, and width) is highlighted. This reduces loop overhead. So a rule about unrolling loops with known bounds using pragmas makes sense.

Kernel 1 also uses __restrict__ qualifiers on pointers, which helps the compiler avoid aliasing issues. That's another rule: using __restrict__ to enable better alias analysis.

The index calculations in Kernel 1 benefit from fast integer division due to constants, leading to another rule about using compile-time constants for index calculations to optimize divisions.

Specialization for specific parameters (like fixed input channels and kernel size) allows eliminating boundary checks and optimizing register allocation. This can be a rule about specializing kernels for fixed parameters to remove boundary checks.

Additionally, Kernel 1 uses explicit data types (float) instead of templates, which allows more FPU optimizations. So a rule about avoiding templated types when possible for better optimization.

Memory access patterns are improved by pre-calculating values outside loops and using channel offsets. This translates to a rule about pre-computing memory offsets outside loops to enhance locality.

Putting these together, the rules should cover compile-time constants, loop unrolling, restrict qualifiers, index optimizations, specialization, data types, and memory access patterns. Each of these is objectively checkable in code without subjective judgment.


ANSWER:


[
    "The kernel uses compile-time constants for parameters to enable loop unrolling and constant propagation",
    "The kernel applies #pragma unroll directives to loops with statically known bounds",
    "The kernel uses __restrict__ qualifiers on pointer arguments to enable alias optimization",
    "The kernel employs fast integer division/modulo operations using compile-time constants for index calculations",
    "The kernel specializes for fixed input channel counts to eliminate boundary checks in inner loops",
    "The kernel pre-computes memory access patterns outside inner loops to improve spatial locality",
    "The kernel avoids template parameters for fundamental data types to enable type-specific optimizations"
]

Usage:
{'inputTokens': 1976, 'outputTokens': 506, 'totalTokens': 2482}