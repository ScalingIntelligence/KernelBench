You are a kernel expert. You are given two CUDA kernels that solve the same problem. Both kernels are correct, but one is faster than the other. Analyze why one is faster than the other.
Kernel 1 (runtime: 29.5 ms):
```
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# Optimized fused scale-add kernel with vectorization and memory optimizations
fused_scale_add_source = """
#include <torch/extension.h>
#include <cuda_runtime.h>

__global__ __launch_bounds__(256) void fused_scale_add_kernel(
    const float* __restrict__ x,
    float* __restrict__ out,
    int size,
    float scaling_factor) {
    
    const float combined_scale = scaling_factor + 1.0f;
    const int tid = blockIdx.x * blockDim.x + threadIdx.x;
    const int elements_per_thread = 4;
    const int idx = tid * elements_per_thread;
    
    if (idx >= size) return;
    
    // Vectorized load with boundary checks
    float4 local_x;
    const int remaining = size - idx;
    if (remaining >= 4) {
        local_x = *reinterpret_cast<const float4*>(x + idx);
    } else {
        local_x = {0.0f, 0.0f, 0.0f, 0.0f};
        if (remaining > 0) local_x.x = x[idx];
        if (remaining > 1) local_x.y = x[idx+1];
        if (remaining > 2) local_x.z = x[idx+2];
    }

    // Apply combined scaling factor
    local_x.x *= combined_scale;
    local_x.y *= combined_scale;
    local_x.z *= combined_scale;
    local_x.w *= combined_scale;

    // Vectorized store with boundary checks
    if (remaining >= 4) {
        *reinterpret_cast<float4*>(out + idx) = local_x;
    } else {
        if (remaining > 0) out[idx] = local_x.x;
        if (remaining > 1) out[idx+1] = local_x.y;
        if (remaining > 2) out[idx+2] = local_x.z;
    }
}

torch::Tensor fused_scale_add_cuda(torch::Tensor x, float scaling_factor) {
    auto out = torch::empty_like(x);
    int size = x.numel();
    
    const int block_size = 256;
    const int elements_per_thread = 4;
    const int grid_size = (size + (block_size * elements_per_thread) - 1) / (block_size * elements_per_thread);
    
    fused_scale_add_kernel<<<grid_size, block_size>>>(
        x.data_ptr<float>(),
        out.data_ptr<float>(),
        size,
        scaling_factor
    );
    
    return out;
}
"""

fused_scale_add_cpp_source = "torch::Tensor fused_scale_add_cuda(torch::Tensor x, float scaling_factor);"

fused_scale_add = load_inline(
    name="fused_scale_add",
    cpp_sources=fused_scale_add_cpp_source,
    cuda_sources=fused_scale_add_source,
    functions=["fused_scale_add_cuda"],
    verbose=True,
    extra_cuda_cflags=["-O3", "--use_fast_math", "-Xptxas=--warn-on-local-memory-usage"]
)

class ModelNew(nn.Module):
    def __init__(self, in_features, out_features, scaling_factor):
        super(ModelNew, self).__init__()
        self.matmul = nn.Linear(in_features, out_features)
        self.scaling_factor = scaling_factor

    def forward(self, x):
        x = self.matmul(x)
        x = fused_scale_add.fused_scale_add_cuda(x, self.scaling_factor)
        return x

batch_size = 16384
in_features = 4096
out_features = 4096
scaling_factor = 0.5

def get_inputs():
    return [torch.rand(batch_size, in_features).cuda()]

def get_init_inputs():
    return [in_features, out_features, scaling_factor]
```

Kernel 2 (runtime: 29.4 ms):
```
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# Custom fused scale-add CUDA kernel implementation
fused_scale_add_source = """
#include <torch/extension.h>
#include <cuda_runtime.h>

__global__ void fused_scale_add_kernel(const float* x, float* out, int size, float scaling_factor) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < size) {
        out[idx] = x[idx] * scaling_factor + x[idx];
    }
}

torch::Tensor fused_scale_add_cuda(torch::Tensor x, float scaling_factor) {
    auto out = torch::empty_like(x);
    int size = x.numel();
    
    const int block_size = 256;
    int num_blocks = (size + block_size - 1) / block_size;
    
    fused_scale_add_kernel<<<num_blocks, block_size>>>(
        x.data_ptr<float>(),
        out.data_ptr<float>(),
        size,
        scaling_factor
    );
    
    return out;
}
"""

fused_scale_add_cpp_source = "torch::Tensor fused_scale_add_cuda(torch::Tensor x, float scaling_factor);"

# Load the custom CUDA extension
fused_scale_add = load_inline(
    name="fused_scale_add",
    cpp_sources=fused_scale_add_cpp_source,
    cuda_sources=fused_scale_add_source,
    functions=["fused_scale_add_cuda"],
    verbose=True
)

class ModelNew(nn.Module):
    """
    Optimized model using fused scale-add CUDA kernel.
    Maintains same functionality but with reduced memory operations.
    """
    def __init__(self, in_features, out_features, scaling_factor):
        super(ModelNew, self).__init__()
        self.matmul = nn.Linear(in_features, out_features)
        self.scaling_factor = scaling_factor

    def forward(self, x):
        x = self.matmul(x)
        x = fused_scale_add.fused_scale_add_cuda(x, self.scaling_factor)
        return x

batch_size = 16384
in_features = 4096
out_features = 4096
scaling_factor = 0.5

def get_inputs():
    return [torch.rand(batch_size, in_features).cuda()]

def get_init_inputs():
    return [in_features, out_features, scaling_factor]
```
