You are a kernel expert. You are given two CUDA kernels that solve the same problem. Both kernels are correct, but one is faster than the other. Analyze why one is faster than the other.
Kernel 1 (runtime: 18.7 ms):
```
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# Define custom GELU CUDA kernel
gelu_cuda_source = """
#include <torch/extension.h>
#include <cuda_runtime.h>
#include <math.h>

__global__ void gelu_kernel(const float* x, float* out, int size) {
    const int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < size) {
        const float x_val = x[idx];
        out[idx] = 0.5f * x_val * (1.0f + erff(x_val * 0.7071067811865476f));
    }
}

torch::Tensor gelu_forward_cuda(torch::Tensor x) {
    auto out = torch::empty_like(x);
    int size = x.numel();
    const int block_size = 256;
    int grid_size = (size + block_size - 1) / block_size;
    gelu_kernel<<<grid_size, block_size>>>(x.data_ptr<float>(), out.data_ptr<float>(), size);
    return out;
}
"""

gelu_cpp_source = "torch::Tensor gelu_forward_cuda(torch::Tensor x);"

# Load the custom CUDA kernel
gelu_module = load_inline(
    name='gelu_forward',
    cpp_sources=gelu_cpp_source,
    cuda_sources=gelu_cuda_source,
    functions=['gelu_forward_cuda'],
    verbose=True
)

class ModelNew(nn.Module):
    def __init__(self):
        super(ModelNew, self).__init__()
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        return gelu_module.gelu_forward_cuda(x)
```

Kernel 2 (runtime: 18.7 ms):
```
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# Custom GELU CUDA kernel implementation
gelu_source = """
#include <torch/extension.h>
#include <cuda.h>
#include <cuda_runtime.h>
#include <math.h>

constexpr float kGeluApproximationConstant = 0.044715f;
constexpr float kSqrt2OverPi = 0.7978845608028654f;  // sqrt(2/pi)

__global__ void gelu_kernel(const float* input, float* output, int num_elements) {
    const int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < num_elements) {
        const float x = input[idx];
        const float x_cubed = x * x * x;
        const float inner = kSqrt2OverPi * (x + kGeluApproximationConstant * x_cubed);
        output[idx] = 0.5f * x * (1.0f + tanhf(inner));
    }
}

torch::Tensor gelu_forward_cuda(torch::Tensor x) {
    auto output = torch::empty_like(x);
    const int num_elements = x.numel();
    
    const int threads_per_block = 256;
    const int num_blocks = (num_elements + threads_per_block - 1) / threads_per_block;
    
    gelu_kernel<<<num_blocks, threads_per_block>>>(
        x.data_ptr<float>(),
        output.data_ptr<float>(),
        num_elements
    );
    
    return output;
}
"""

gelu_cpp_source = "torch::Tensor gelu_forward_cuda(torch::Tensor x);"

# Compile the custom GELU kernel
gelu_extension = load_inline(
    name="gelu_extension",
    cpp_sources=gelu_cpp_source,
    cuda_sources=gelu_source,
    functions=["gelu_forward_cuda"],
    verbose=True
)

class ModelNew(nn.Module):
    def __init__(self):
        super(ModelNew, self).__init__()
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        # Ensure input is on CUDA and contiguous
        x = x.contiguous().cuda()
        return gelu_extension.gelu_forward_cuda(x)
```
