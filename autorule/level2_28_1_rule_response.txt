REASONING TRACE:
Okay, let's break down the reasoning provided and extract the rule-like statements. The user wants these rules to be general enough for various CUDA kernels and objectively verifiable.

First, the reasoning mentions vectorized memory access using float4. That's a clear optimization technique. So a rule could be about using vectorized memory loads/stores with types like float4.

Next, warp-level reductions with shuffle instructions instead of shared memory. This avoids synchronization and shared memory issues. So a rule about using warp shuffle instructions for reductions.

Then, the shared memory usage is reduced. The example shows using shared memory only for partial sums per warp, leading to lower consumption. A rule could state reducing shared memory usage by limiting it to partial results per warp.

The math optimizations include using rsqrt and --use_fast_math. These are specific compiler flags and functions, so a rule about using fast math functions and compiler flags for faster operations.

Loop efficiency is improved by processing multiple elements per iteration via vectorization. So a rule about structuring loops to process multiple elements per iteration.

Also, the kernel uses separate reduction paths for warp and cross-warp sums. That's a specific technique, so a rule about separating warp-level and cross-warp reductions.

Each of these points is a general CUDA optimization strategy. They can be checked by looking at the code for vector types, shuffle instructions, shared memory allocation, compiler flags, loop structure, and reduction methods. These are all objective and deterministic checks.


ANSWER:


[
    "The kernel uses vectorized memory loads/stores (e.g., float4) to reduce memory transactions",
    "The kernel utilizes warp shuffle instructions (__shfl_down_sync) for reductions instead of shared memory",
    "The kernel minimizes shared memory usage by only storing partial sums per warp rather than per thread",
    "The kernel employs fast math operations (e.g., rsqrt) with --use_fast_math compiler flags",
    "The kernel structures loops to process multiple elements per iteration via vectorization",
    "The kernel separates reduction operations into warp-level and cross-warp phases",
    "The kernel uses 128-bit memory transactions to align with CUDA coalescing requirements"
]

Usage:
{'inputTokens': 1476, 'outputTokens': 449, 'totalTokens': 1925}