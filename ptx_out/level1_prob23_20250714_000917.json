{
  "error": "compile_or_runtime",
  "message": "CUDA_ERROR_INVALID_PTX: a PTX JIT compilation failed",
  "grid": 4096,
  "block": 256,
  "llm_out": "```ptx\n.version 7.0\n.target sm_70\n.address_size 64\n\n.shared .align 4 .f32 smem[256];\n\n.visible .entry my_kernel(\n    .param .u64 in_ptr,\n    .param .u64 out_ptr\n)\n{\n    // Registers\n    .reg .pred  %p0, %p1;\n    .reg .b32   %tid, %row, %N, %stride, %idx, %t0, %t1;\n    .reg .b64   %inbase, %outbase, %row_in, %row_out, %addr, %sm_base, %ptrA, %ptrB, %off64, %off64a;\n    .reg .f32   %local_max, %local_sum, %f0, %f1, %f2, %f3, %scale, %block_max, %block_sum;\n\n    // Load parameters\n    ld.param.u64  %inbase,  [in_ptr];\n    ld.param.u64  %outbase, [out_ptr];\n\n    // Thread / block indices\n    mov.u32  %tid, %tid.x;\n    mov.u32  %row, %ctaid.x;\n\n    // Constants\n    mov.u32  %N,      393216;\n    mov.u32  %stride, 256;\n    mov.f32  %scale,  1.44269504f;      // log2(e)\n    mov.b32  %local_max, 0xFF800000;    // -inf\n    mov.f32  %local_sum, 0.0;\n\n    // Row base pointers (byte offsets)\n    mul.wide.u32  %off64, %row, 1572864;   // N * 4\n    add.s64       %row_in,  %inbase,  %off64;\n    add.s64       %row_out, %outbase, %off64;\n\n    // -----------------------------------------------------------\n    // Pass 1: find maximum\n    mov.u32 %idx, %tid;\nPass1:\n    setp.ge.u32 %p0, %idx, %N;\n    @%p0 bra Pass1_done;\n        mul.wide.u32  %off64a, %idx, 4;\n        add.s64       %addr, %row_in, %off64a;\n        ld.global.f32 %f0, [%addr];\n        max.f32       %local_max, %f0, %local_max;\n        add.u32       %idx, %idx, %stride;\n        bra Pass1;\nPass1_done:\n\n    // Store local max to shared\n    cvta.to.shared.u64  %sm_base, smem;\n    shl.b32   %t0, %tid, 2;\n    add.s64   %ptrA, %sm_base, %t0;\n    st.shared.f32 [%ptrA], %local_max;\n    bar.sync 0;\n\n    // Reduction (max)\n    // step 128\n    setp.lt.u32 %p1, %tid, 128;\n    @!%p1 bra max64;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 128;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        max.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nmax64:\n    bar.sync 0;\n    // step 64\n    setp.lt.u32 %p1, %tid, 64;\n    @!%p1 bra max32;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 64;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        max.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nmax32:\n    bar.sync 0;\n    // step 32\n    setp.lt.u32 %p1, %tid, 32;\n    @!%p1 bra max16;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 32;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        max.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nmax16:\n    bar.sync 0;\n    // step 16\n    setp.lt.u32 %p1, %tid, 16;\n    @!%p1 bra max8;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 16;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        max.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nmax8:\n    bar.sync 0;\n    // step 8\n    setp.lt.u32 %p1, %tid, 8;\n    @!%p1 bra max4;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 8;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        max.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nmax4:\n    bar.sync 0;\n    // step 4\n    setp.lt.u32 %p1, %tid, 4;\n    @!%p1 bra max2;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 4;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        max.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nmax2:\n    bar.sync 0;\n    // step 2\n    setp.lt.u32 %p1, %tid, 2;\n    @!%p1 bra max_done;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 2;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        max.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nmax_done:\n    bar.sync 0;\n\n    ld.shared.f32 %block_max, [smem];\n    bar.sync 0;\n\n    // -----------------------------------------------------------\n    // Pass 2: exponentials & partial sums\n    mov.u32 %idx, %tid;\n    mov.f32 %local_sum, 0.0;\nPass2:\n    setp.ge.u32 %p0, %idx, %N;\n    @%p0 bra Pass2_done;\n        mul.wide.u32  %off64a, %idx, 4;\n        add.s64       %addr, %row_in, %off64a;\n        ld.global.f32 %f0, [%addr];\n        sub.f32       %f1, %f0, %block_max;\n        mul.f32       %f2, %f1, %scale;\n        ex2.approx.f32 %f3, %f2;\n        add.f32       %local_sum, %local_sum, %f3;\n        add.s64       %addr, %row_out, %off64a;\n        st.global.f32 [%addr], %f3;\n        add.u32       %idx, %idx, %stride;\n        bra Pass2;\nPass2_done:\n\n    st.shared.f32 [%ptrA], %local_sum;\n    bar.sync 0;\n\n    // Reduction (sum)\n    // step 128\n    setp.lt.u32 %p1, %tid, 128;\n    @!%p1 bra sum64;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 128;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        add.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nsum64:\n    bar.sync 0;\n    // step 64\n    setp.lt.u32 %p1, %tid, 64;\n    @!%p1 bra sum32;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 64;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        add.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nsum32:\n    bar.sync 0;\n    // step 32\n    setp.lt.u32 %p1, %tid, 32;\n    @!%p1 bra sum16;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 32;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        add.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nsum16:\n    bar.sync 0;\n    // step 16\n    setp.lt.u32 %p1, %tid, 16;\n    @!%p1 bra sum8;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 16;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        add.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nsum8:\n    bar.sync 0;\n    // step 8\n    setp.lt.u32 %p1, %tid, 8;\n    @!%p1 bra sum4;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 8;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        add.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nsum4:\n    bar.sync 0;\n    // step 4\n    setp.lt.u32 %p1, %tid, 4;\n    @!%p1 bra sum2;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 4;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        add.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nsum2:\n    bar.sync 0;\n    // step 2\n    setp.lt.u32 %p1, %tid, 2;\n    @!%p1 bra sum_done;\n        ld.shared.f32 %f1, [%ptrA];\n        add.u32  %t1, %tid, 2;\n        shl.b32  %t1, %t1, 2;\n        add.s64  %ptrB, %sm_base, %t1;\n        ld.shared.f32 %f2, [%ptrB];\n        add.f32  %f1, %f1, %f2;\n        st.shared.f32 [%ptrA], %f1;\nsum_done:\n    bar.sync 0;\n\n    ld.shared.f32 %block_sum, [smem];\n    bar.sync 0;\n\n    // -----------------------------------------------------------\n    // Pass 3: normalize\n    mov.u32 %idx, %tid;\nPass3:\n    setp.ge.u32 %p0, %idx, %N;\n    @%p0 bra Pass3_done;\n        mul.wide.u32 %off64a, %idx, 4;\n        add.s64      %addr, %row_out, %off64a;\n        ld.global.f32 %f0, [%addr];\n        div.approx.f32 %f1, %f0, %block_sum;\n        st.global.f32  [%addr], %f1;\n        add.u32 %idx, %idx, %stride;\n        bra Pass3;\nPass3_done:\n\n    ret;\n}\n```\nLAUNCH = (4096, 256)"
}